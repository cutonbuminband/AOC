#+PROPERTY: header-args:jupyter-python  :session aoc :kernel python
#+PROPERTY: header-args    :pandoc t

* Imports
#+begin_src jupyter-python
  import pandas as pd
  import numpy as np
  from collections import defaultdict
  from pathlib import Path
  import functools
  import itertools
  import more_itertools
  datadir = Path("data/2019")
#+end_src

* Day 1
[[https://adventofcode.com/2019/day/1][The Tyranny of the Rocket Equation]]
** Part 1
#+begin_src jupyter-python
data = [int(x) for x in open(datadir / "1.txt").readlines()]
sum([x//3 - 2 for x in data])
#+end_src
** Part 2
#+begin_src jupyter-python
  total = 0
  for val in data:
      fuel = max(val // 3 - 2, 0)
      total += fuel
      if fuel:
          data.append(fuel)
  total
#+end_src
* Day 2
[[https://adventofcode.com/2019/day/2][1202 Program Alarm]]
** Part 1
#+begin_src jupyter-python
  program = [int(x) for x in open(datadir / "2.txt").readline().split(',')]
  def run(program, ip=0, noun=12, verb=2):
      program = program.copy()
      program[1] = noun
      program[2] = verb
      ops = {1: lambda x, y: x + y, 2: lambda x, y: x * y}
      while True:
          op = program[ip]
          if op == 99:
              return program[0]
          left, right, destination = program[ip + 1: ip + 4]
          program[destination] = ops[op](program[left], program[right])
          ip += 4
  run(program)
#+end_src
#+begin_src jupyter-python
  for noun, verb in itertools.product(range(100), range(100)):
      result = run(program, 0, noun, verb)
      if result == 19690720:
          result = 100 * noun + verb
          break
  result
#+end_src
* Day 3
[[https://adventofcode.com/2019/day/3][Crossed Wires]]

** Part 1
#+begin_src jupyter-python
    with open(datadir / '3.txt') as f:
        lines = [x.strip().split(',') for x in f.readlines()]

    def path_to_segments(path):
        directions = {"U": 1j, "D": -1j, "R": 1 , "L": -1}
        deltas = [int(p[1:]) * directions[p[0]] for p in path]
        ends = np.cumsum(deltas)
        lengths = np.cumsum(np.abs(deltas))
        result = np.vstack([np.roll(ends, 1), ends, np.roll(lengths, 1)]).T
        result[0, 0] = 0
        result[0, 2] = 0
        return result

    def intersection(s1, s2):
        if ((s1[1] - s1[0]) * (s2[1] - s2[0])).imag == 0:
            return False
        if (s1[0] - s1[1]).imag == 0:
            s2, s1 = s1, s2
        if ((s1[0].real - s2[0].real) * (s1[1].real - s2[1].real) < 0
            and (s1[0].imag - s2[0].imag) * (s1[1].imag - s2[1].imag) < 0):
            intersection_point = s1[0].real + 1j * s2[0].imag
            total_length = (s1[2] + s2[2]
                            + abs((s1[0] - intersection_point).imag)
                            + abs((s2[0] - intersection_point).real))
            return intersection_point, total_length
        return False

    l1 = path_to_segments(lines[0])
    l2 = path_to_segments(lines[1])
    intersections = [i for s1, s2 in itertools.product(l1, l2) if (i := intersection(s1, s2))]
    int(min( abs(x[0].real) + abs(x[0].imag) for x in intersections))
#+end_src

** Part 2
#+begin_src jupyter-python
min(x[1] for x in intersections)

#+end_src

** Bonus
As a bonus, we can visualize the walk through space
#+begin_src jupyter-python

  import matplotlib.pyplot as plt
  plt.style.use("seaborn")

  def plot_path(segments, **kwargs):
      x = segments[:, 0].real
      y = segments[:, 0].imag
      plt.plot(x, y, **kwargs)
  plot_path(l1)
  plot_path(l2)
  ax = plt.gca()
  plt.savefig("graphs/2019-3.png", bbox_inches="tight")

#+end_src

That gives this plot for the two different wires

[[graphs/2019-3.png]]

* Day 4
[[https://adventofcode.com/2019/day/4][Secure Container]]
** Part 1
#+begin_src jupyter-python
  low = 231832
  high = 767346
  total = 0
  for i in range(low, high + 1):
      s = str(i)
      if list(s) == sorted(s):
          for digit in '0123456789':
              if s.count(digit) > 1:
                  total += 1
                  break
  total
#+end_src
** Part 2
#+begin_src jupyter-python
  total = 0
  for i in range(low, high + 1):
      s = str(i)
      if list(s) == sorted(s):
          if (s[0] == s[1] != s[2]) or (s[-1] == s[-2] != s[-3]):
              total += 1
              continue
          for idx in range(1, len(s) - 2):
              if s[idx - 1] != s[idx] == s[idx + 1] != s[idx + 2]:
                  total += 1
                  break
  total

#+end_src
* Day 5
[[https://adventofcode.com/2019/day/5][Sunny with a Chance of Asteroids]]
** Part 1
#+begin_src jupyter-python
  binops = {1: lambda x, y: x + y,
            2: lambda x, y: x * y,
            7: lambda x, y: x < y,
            8: lambda x, y: x == y}

  instruction_lengths = {1: 4, 2: 4, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4}

  def step(program, ip, inputs=None, outputs=None):
      op = program[ip]
      instruction = op % 100
      mode = [int(x) for x in str(op)[:-2].rjust(3, '0')][::-1]
      l = instruction_lengths[instruction]
      params = [val if mode[idx] == 1 else program[val]
                for idx, val in enumerate(program[ip + 1: ip + l])]
      if instruction in binops:
          assert mode[2] != 1, "Incorrect mode for destination"
          program[program[ip + 3]] = binops[instruction](*params[:-1])
      elif instruction == 3:
          if inputs is None:
              program[program[ip + 1]] = int(input("Please input the parameter\n"))
          elif inputs:
              program[program[ip + 1]] = inputs.pop(0)
          else:
              ip -= l

      elif instruction == 4:
          if outputs is None:
              print("Program output: {}".format(params[0]))
          else:
              outputs.append(params[0])
      elif (instruction == 5 and params[0] != 0) or (instruction == 6 and params[0] == 0):
              ip = params[1] - l
      return program, ip + l

  ip = 0
  program = np.loadtxt(datadir / "5.txt", dtype=int, delimiter=",")
  inputs = [1]
  while True:
      opcode = program[ip]
      if opcode == 99:
          break
      program, ip = step(program, ip, inputs)
#+end_src

** Part 2
#+begin_src jupyter-python
  ip = 0
  program = np.loadtxt(datadir / "5.txt", dtype=int, delimiter=",")
  inputs = [5]
  while True:
      opcode = program[ip]
      if opcode == 99:
          break
      program, ip = step(program, ip, inputs)
#+end_src
* Day 6
[[https://adventofcode.com/2019/day/6][Universal Orbit Map]]
** Part 1
We construct the DAG as a dictionary, where graph[node] corresponds to node.parent. We use a second dictionary to memoize the counts of how far each node is from the COM
#+begin_src jupyter-python
  data = open(datadir / "6.txt").readlines()
  graph = {}
  for i, line in enumerate(data):
      parent, child = line.strip().split(")")
      graph[child] = parent
  orbit_counts = {"COM": 0}
  def count_orbits(node):
      if node not in orbit_counts:
          orbit_counts[node] = 1 + count_orbits(graph[node])
      return orbit_counts[node]
  sum(count_orbits(x) for x in graph)
#+end_src
** Part 2
Moving from orbit A to orbit B can be accomplished by moving to the last common ancestor of each node, and then switching branches. So we get the full ancestry of one of the nodes, and then traverse the other one upwards until we get a match.
#+begin_src jupyter-python
  orbit_counts = {"COM": 0}
  end = count_orbits("YOU")
  result = 0
  node = "SAN"
  while node not in orbit_counts:
      result += 1
      node = graph[node]
  end - orbit_counts[node] + result - 2
#+end_src
* Day 7
[[https://adventofcode.com/2019/day/7][Amplification Circuit]]
** Part 1
#+begin_src jupyter-python
  l = list(map(int, open(datadir / "7.txt").readline().split(',')))
  input_sequences = itertools.permutations(range(5))
  maxval = 0
  for input_sequence in input_sequences:
      current = list(input_sequence)
      outputs = [0]
      while current:
          inputs = [current.pop(0), outputs.pop(0)]
          p = l.copy()
          ip = 0
          op = p[ip]
          while op % 100 != 99:
              p, ip = step(p, ip, inputs, outputs)
              op = p[ip]
      if outputs[0] > maxval:
          maxval = outputs[0]
  maxval

#+end_src
** Part 2
#+begin_src jupyter-python
  input_sequences = itertools.permutations(range(5, 10))
  maxval = 0
  for seq in input_sequences:
      inputs = [[seq[0], 0], [seq[1]], [seq[2]], [seq[3]], [seq[4]]]
      programs = [[l.copy(), 0], [l.copy(), 0], [l.copy(), 0], [l.copy(), 0], [l.copy(), 0]]
      done = False
      while not done:
          done = True
          for i in range(5):
              p, ip = programs[i]
              op = p[ip]
              if op % 100 != 99:
                  p, ip = step(p, ip,
                               inputs=inputs[i], outputs=inputs[(i + 1) % 5])
                  programs[i] = [p, ip]
                  done = False
      if inputs[0][0] > maxval:
          maxval = inputs[0][0]
  maxval
#+end_src
* Day 8
[[https://adventofcode.com/2019/day/8][Space Image Format]]
** Part 1
#+begin_src jupyter-python
  data = open(datadir / "8.txt").read().strip()
  result = []
  for i in range(len(data) // (25 * 6))[::-1]:
      substring = data[25*6*i: 25*6*(i+1)]
      result.append((substring.count("0"), substring.count("1") * substring.count("2")))
  min(result)[1]
#+end_src
** Part 2
#+begin_src jupyter-python
  result = list("1" * 25 * 6)
  for i in range(len(data) // (25 * 6))[::-1]:
      substring = data[25*6*i: 25*6*(i+1)]
      result = [bottom if top == "2" else top for top, bottom in zip(substring, result)]

  print("\n".join(["".join(["â–ˆ" if char != "0" else " " for char in line])
                   for line in  np.array(result).reshape(6, 25)]))
#+end_src
