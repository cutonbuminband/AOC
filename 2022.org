#+PROPERTY: header-args:jupyter-python  :session aoc :kernel python
#+PROPERTY: header-args    :pandoc t

* Imports
#+begin_src jupyter-python
  import pandas as pd
  import numpy as np
  from collections import defaultdict
  from pathlib import Path
  import functools
  import more_itertools
  import re
  datadir = Path("data/2022")
#+end_src

* Day 1
[[https://adventofcode.com/2022/day/1][Calorie Counting]]
** Part 1
The Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they've brought with them, one item per line. Each Elf separates their own inventory from the previous Elf's inventory (if any) by a blank line.

Find the Elf carrying the most Calories. How many total Calories is that Elf carrying?

#+begin_src jupyter-python
  elves = [x.split("\n") for x in open(datadir / "1.txt", "r", encoding="utf8").read().split("\n\n")]
  max([sum([int(y) for y in x if y]) for x in elves])
#+end_src

** Part 2
By the time you calculate the answer to the Elves' question, they've already realized that the Elf carrying the most Calories of food might eventually run out of snacks.

To avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.

#+begin_src jupyter-python
  sum(sorted([sum([int(y) for y in x if y]) for x in elves])[-3:])
#+end_src

* Day 2:
[[https://adventofcode.com/2022/day/2][Rock Paper Scissors]]

** Part 1
#+begin_src jupyter-python
lines = [[ord(x) - ord("A"), ord(y) - ord("X")]
         for x, y in map(str.split, open(datadir / "2.txt").readlines())]
sum([line[1] + 1 + 3 * ((line[1] - line[0] + 1) % 3) for line in lines])
#+end_src

** Part 2
#+begin_src jupyter-python
sum([(line[1] + line[0] - 1) % 3 + 1 + 3 * line[1] for line in lines])
#+end_src

* Day 3:
[[https://adventofcode.com/2022/day/3][Rucksack Reorganization]]
** Part 1
#+begin_src jupyter-python
  total = 0
  lines = list(map(str.strip, open(datadir / "3.txt", encoding="utf8")))
  for l in lines:
      letter = set(l[:len(l) // 2]).intersection(set(l[len(l) // 2:])).pop()
      total += ord(letter.upper()) - ord("A") + 1 + 26 * letter.isupper()
  total
#+end_src

** Part 2
#+begin_src jupyter-python
  total = 0
  for chunk in more_itertools.chunked(lines, 3):
      letter = functools.reduce(lambda x, y: set(x).intersection(set(y)), chunk).pop()
      total += ord(letter.upper()) - ord("A") + 1 + 26 * letter.isupper()
  total
#+end_src

* Day 4
[[https://adventofcode.com/2022/day/4][Camp Cleanup]]
** Part 1
#+begin_src jupyter-python
  assignments = [x.strip() for x in open(datadir / "4.txt", encoding="utf8").readlines()]
  regex = re.compile("\d+")
  assignments = map(lambda x: [int(y) for y in re.findall(regex, x)], assignments)
  assignments = [sorted([a[:2], a[2:]]) for a in assignments]
  sum((a[1] >= b[1] or a[0] == b[0]) for a, b in assignments)
#+end_src

** Part 2
#+begin_src jupyter-python
  sum((a[1] >= b[0] or a[0] == b[0]) for a, b in assignments)
#+end_src

* Day 5
[[https://adventofcode.com/2022/day/5][Supply Stacks]]

** Part 1
#+begin_src jupyter-python
  lines = [line.strip() for line in open(datadir / "5.txt").readlines()]
  numbers = [re.findall("\d+", line) for line in lines]
  split = np.argmax([len(x) for x in numbers])
  instructions = [[int(y) for y in x] for x in numbers[split + 1:] if x]
  initial_state = list(itertools.zip_longest(*lines[:split]))

  letters = [re.findall("[A-Z]", ''.join(column)) for column in initial_state]
  p1 = [x[::-1] for x in letters.copy() if x]
  for n, source, dest in instructions:
      for i in range(n):
          p1[dest - 1].append(p1[source - 1].pop())
  ''.join(x[-1] if x else ' ' for x in p1)
#+end_src

** Part 2
#+begin_src jupyter-python
  p2 = [x[::-1] for x in letters.copy() if x]
  for n, source, dest in instructions:
      p2[dest - 1] += p2[source - 1][-n:]
      p2[source - 1] = p2[source - 1][:-n]
  ''.join(x[-1] if x else ' ' for x in p2)
#+end_src

* Day 6
[[https://adventofcode.com/2022/day/6][Tuning Trouble]]
** Part 1
#+begin_src jupyter-python
  data = open(datadir / "6.txt").readline()
  def find_marker(n):
      for i in range(len(data) - n + 1):
          if len(set(list(data[i:i+n]))) == n:
              return i + n
  find_marker(4)
#+end_src

** Part 2
#+begin_src jupyter-python
find_marker(14)
#+end_src
