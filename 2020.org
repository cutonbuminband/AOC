#+PROPERTY: header-args:jupyter-python  :session aoc-2020 :kernel aoc
#+PROPERTY: header-args    :pandoc t

* Imports
#+begin_src jupyter-python
  import pandas as pd
  import numpy as np
  from collections import defaultdict
  import itertools
  from pathlib import Path
  import functools
  import re
  datadir = Path("data/2020/")
#+end_src

* Day 1:
[[https://adventofcode.com/2020/day/1][Report Repair]]
** Part 1
Specifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.
#+begin_src jupyter-python
data = np.loadtxt(datadir / "1.txt", dtype=int)
[pair[0] * pair[1] for pair in itertools.product(data, data) if sum(pair) == 2020][0]
#+end_src

** Part 2
In your expense report, what is the product of the three entries that sum to 2020?
#+begin_src jupyter-python
[triple[0] * triple[1] * triple[2] for triple in itertools.product(data, data, data) if sum(triple) == 2020][0]
#+end_src

* Day 2:
[[https://adventofcode.com/2020/day/2][Password Philosophy]]
** Part 1
#+begin_src jupyter-python
  def is_valid(interval, letters, password):
      interval = [int(x) for x in interval.split('-')]
      occurrences = password.count(letters[0])
      return interval[0] <= occurrences <= interval[1]

  lines = list(map(str.split, open(datadir / "2.txt", encoding="utf8").readlines()))
  sum([is_valid(*line) for line in lines])
#+end_src

** Part 2
#+begin_src jupyter-python
  from operator import xor

  def is_valid(interval, letters, password):
      lower, upper = [int(x) - 1 for x in interval.split('-')]
      return xor(password[lower] == letters[0], password[upper] == letters[0])
  sum([is_valid(*line) for line in lines])
#+end_src

* Day 3
[[https://adventofcode.com/2020/day/3][Toboggan Trajectory]]
** Part 1
#+begin_src jupyter-python
  def read(myfile):
      lines = open(myfile).readlines()
      lookup = {'.': 0, "#": 1}
      lines = np.array([[lookup[x] for x in line.strip()] for line in lines])
      return lines

  data = read(datadir / '3.txt')

  def count_trees(data, width_change, height_change):
      height, width = data.shape
      result = 0
      for i in range((height - 1) // height_change + 1):
          result += data[i * height_change, (i * width_change) % width]
      return result

  count_trees(data, 3, 1)
#+end_src

** Part 2
#+begin_src jupyter-python
  slopes = [[1, 1], [3, 1], [5, 1], [7, 1], [1, 2]]
  np.prod([count_trees(data, slope[0], slope[1]) for slope in slopes])
#+end_src

* Day 4
[[https://adventofcode.com/2020/day/4][Passport Processing]]
** Part 1
#+begin_src jupyter-python
  data = open(datadir / "4.txt").read()
  passports = data.split("\n\n")
  passport_dicts = [dict(list(map(lambda x: x.split(":"), p.replace("\n", " ").split()))) for p in passports]
  sum([len(set(p.keys()) - set(["cid"])) == 7 for p in passport_dicts])
#+end_src

** Part 2
#+begin_src jupyter-python
  def validate_key(key, value):
      year_limits = {'byr': [1920, 2002],
                     'eyr': [2020, 2030],
                     'iyr': [2010, 2020]}
      try:
          if key in ['byr', 'eyr', 'iyr']:
              minval, maxval = year_limits[key]
              return minval <= int(value) <= maxval
          if key == 'hgt':
              value, unit = int(value[:-2]), value[-2:]
              return ((unit == 'cm' and (150 <= value <= 193))
                      or (unit == 'in' and (59 <= value <= 76)))
          if key == 'hcl':
              return (value[0] == "#"
                      and len(value) == 7
                      and not (set(value[1:]) - set("0123456789abcdef")))
          if key == 'ecl':
              return value in ["amb", "blu", "brn", "gry", "grn", "hzl", "oth"]
          if key == 'pid':
              test = int(value)
              return len(value) == 9
          return True
      except ValueError:
          return False

  def is_valid_passport(p):
      return len(set(p.keys()) - set(["cid"])) == 7 and all([validate_key(key, p[key]) for key in p])

  sum([is_valid_passport(p) for p in passport_dicts])
#+end_src

* Day 5
[[https://adventofcode.com/2020/day/5][Binary Boarding]]
** Part 1
#+begin_src jupyter-python
  # "BFFFBBFRRR" -> 70, column 7 -> 567
  def seat_id(instruction):
      return int(instruction.translate(str.maketrans("BFRL", "1010")), 2)

  seat_ids = [seat_id(x.strip()) for x in open(datadir / "5.txt").readlines()]
  max(seat_ids)

#+end_src

** Part 2
#+begin_src jupyter-python
  (set(range(min(seat_ids), max(seat_ids) + 1)) - set(seat_ids)).pop()
#+end_src

* Day 6
[[https://adventofcode.com/2020/day/6][Custom Customs]]
** Part 1
#+begin_src jupyter-python
  data = open(datadir / "6.txt").read()
  groups = data.split("\n\n")
  sum(len(set(list(group.replace("\n", "")))) for group in groups)
#+end_src

** Part 2
#+begin_src jupyter-python
  sum(len(functools.reduce(lambda x, y: set(x) & set(y), (group.splitlines())))
      for group in groups)
#+end_src

* Day 7
[[https://adventofcode.com/2020/day/7][Handy Haversacks]]

** Part 1
Nothing super groundbreaking for part one. I thought of using a regex to parse the input, but splitting on commas and then into words works just fine.
#+begin_src jupyter-python
  data = open(datadir / "7.txt").readlines()
  tree = {}
  for line in data:
      bag, contents = line.strip().split(" bags contain ")
      if "no other" in contents:
          contents = {}
      else:
          elements = contents.split(", ")
          contents = {' '.join(words[1:-1]): int(words[0]) for words in map(str.split, elements)}
      tree[bag] = contents

  @functools.cache
  def contains_gold(key):
      return ("shiny gold" in tree[key] or any(contains_gold(child) for child in tree[key]))

  sum(contains_gold(key) for key in tree)
#+end_src

** Part 2
The key thing to remember is to include the bag itself, as well as the bags it contains, when calculating the total. That's what the "+1" is for in the sum
#+begin_src jupyter-python
  @functools.cache
  def count_bags(bag):
      return sum(tree[bag][key] * (count_bags(key) + 1) for key in tree[bag])
  count_bags("shiny gold")
#+end_src

* Day 8
[[https://adventofcode.com/2020/day/8][Handheld Halting]]
** Part 1
#+begin_src jupyter-python
  data = [x.strip().split() for x in open(datadir / "8.txt").readlines()]
  data = [(x[0], int(x[1])) for x in data]
  def terminal_run(program):
      ip, accumulator = 0, 0
      seen = {}
      while ip != len(program):
          if ip in seen:
              return False, accumulator
          seen[ip] = 1
          instruction, operand = program[ip]
          ip += 1
          if instruction == "jmp":
              ip += operand - 1
          if instruction == "acc":
              accumulator += operand
      return True, accumulator

  terminal_run(data)[1]

#+end_src

** Part 2
#+begin_src jupyter-python
  instruction_map = {"acc": "acc", "jmp": "nop", "nop": "jmp"}
  for idx, instruction in enumerate(data):
      new_instruction = (instruction_map[instruction[0]], instruction[1])
      status, value = terminal_run(data[:idx] + [new_instruction] + data[idx + 1:])
      if status:
          break
  value
#+end_src

* Day 9
[[https://adventofcode.com/2020/day/9][Encoding Error]]
** Part 1
#+begin_src jupyter-python
  data = [int(x) for x in open(datadir / "9.txt").readlines()]
  end = len(data) - 25
  for window_start in range(end):
      target = data[window_start + 25]
      if min(map(lambda x: abs(target - sum(x)), itertools.combinations(data[window_start: window_start + 25], 2))) != 0:
          break
  invalid_number = target
  invalid_number
#+end_src

** Part 2
#+begin_src jupyter-python
  start_idx, end_idx = 0, 1
  while start_idx < len(data):
      total = sum(data[start_idx: end_idx])
      if total == invalid_number:
          break
      if total < invalid_number:
          end_idx += 1
      if total > invalid_number:
          start_idx += 1
          end_idx = start_idx + 1
  min(data[start_idx:end_idx]) + max(data[start_idx:end_idx])
#+end_src

* Day 10
[[https://adventofcode.com/2020/day/10][Adapter Array]]
** Part 1
#+begin_src jupyter-python
  data = [0] + sorted([int(x) for x in open(datadir / "10.txt").readlines()])
  (np.diff(data) == 1).sum() * ((np.diff(data) == 3).sum() + 1)
#+end_src

** Part 2
Sorting the values, we see a series of jumps of 1 and jumps of 3. If the value is allowed to jump by at most 3 every time, then we have to include both sides of every jump of 3.

The only interesting thing is then what to do with runs of 1 jumps. In general, we can count the number of ways, f, as follows

f(n) = f(n - 1) + g(n-1)

The first term comes from saying that we pick the first element, leaving us with a run of length (n - 1), exactly as before. The second comes from saying that we skip the first element, and now have to find the number of ways of choosing for a series of gaps starting with 2, followed by n - 2 ones. Similarly

g(n - 1) = f(n - 2) + f(n - 3)

If we pick the element that resulted in a gap of two, then we just have to choose from a run of n - 2 ones, which is the f we are looking at. If we don't pick it, we've created a gap of size 3 - but then we are forced to pick the next element, leaving us with a run of length n - 3 to distribute.

Putting everything together gives the recurrence

f(n) = f(n - 1) + f(n - 2) + f(n - 3),

with initial conditions f(0) = 1, f(-1) = 0, f(-2) = 0.

That recurrence can be written in matrix form as

$$\begin{pmatrix}
1 & 1 & 1 \\
1 & 0 & 0 \\
0 & 1 & 0 \\
\end{pmatrix}$$

And iterating the function is then just a question of matrix powers
#+begin_src jupyter-python
  def total_ways(n_ones):
      matrix = np.array([[1, 1, 1], [1, 0, 0], [0, 1, 0]])
      return (np.linalg.matrix_power(matrix, n_ones) @ [1, 0, 0])[0]
  np.product([total_ways(len(x)) for x in ''.join(str(x) for x in np.diff(data)).split("3")])
#+end_src

* Day 11
[[https://adventofcode.com/2020/day/11][Seating System]]
** Part 1
For the first part, we are taking the convolution of our original grid with a weights array that looks like
$$
\begin{pmatrix}
1 & 1 & 1\\
1 & 0 & 1\\
1 & 1 & 1\\
\end{pmatrix}
$$
Scipy has nice routines that handle all that indexing for us, so we'll cheat and use them. The only slight issue is what to do at the edge of the grid, but using a constant value of 0 for any cells that would fall outside the grid works out of the box.

#+begin_src jupyter-python
  import scipy
  data = np.array([[1 if char == "." else 0 for char in line.strip()] for line in open(datadir / "11.txt").readlines()])
  mask = np.where(data)
  board = np.zeros(data.shape, dtype=int)
  new_board = np.ones(board.shape, dtype=int)
  new_board[mask] = 0
  weights = [[1,1,1], [1,0,1], [1,1,1]]
  while (board != new_board).any():
      board = new_board.copy()
      convolution = scipy.ndimage.convolve(new_board, weights, mode='constant')
      new_board[np.where(convolution == 0)] = 1
      new_board[np.where(convolution >= 4)] = 0
      new_board[mask] = 0
  board.sum()
#+end_src

** Part 2
For part 2 I was unable to find a nice way of expressing the condition of "Look for the first grid position in a given direction which is not floor". That means that I have to manually loop over the grid instead of using the convolution routine - and that really slows down the runtime!
#+begin_src jupyter-python
  board = np.zeros(data.shape, dtype=int)
  new_board = np.ones(board.shape, dtype=int)
  new_board[mask] = 0
  def update(board):
      new_board = board.copy()
      directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]
      for row, col in itertools.product(*[range(x) for x in board.shape]):
          total = 0
          for direction in directions:
              done = False
              new_row, new_col = row, col
              while not done:
                  new_row, new_col = new_row + direction[0], new_col + direction[1]
                  if new_row < 0 or new_row >= board.shape[0] or new_col < 0 or new_col >= board.shape[1]:
                      break
                  if not data[new_row, new_col]:
                      done = True
              else:  # no break - so a valid position
                  total += board[new_row, new_col]
          if total == 0:
              new_board[row, col] = 1
          if total >= 5:
              new_board[row, col] = 0
      new_board[mask] = 0
      return new_board

  while (new_board != board).any():
      board = new_board
      new_board = update(new_board)
  new_board.sum()
#+end_src

* Day 12
[[https://adventofcode.com/2020/day/12][Rain Risk]]

** Part 1
I'll use the usual trick of modelling the 2d grid as the complex plane.
#+begin_src jupyter-python
  directions = {"N": 1j, "E": 1, "S": -1j, "W": -1}
  turns = {"L": 1j, "R": -1j}
  position, direction = 0, 1

  def update_state(position, direction, instruction, value, part=1):
      if instruction in directions:
          offset = directions[instruction] * value
          return (position + offset, direction) if part == 1 else (position, direction + offset)
      if instruction in turns:
          return position, direction * turns[instruction]**(int(value // 90))
      return position + value * direction, direction

  instructions = open(datadir / "12.txt").readlines()
  for instruction, value in map(lambda x: (x[0], int(x[1:])), instructions):
      position, direction = update_state(position, direction, instruction, value)
  int(abs(position.real) + abs(position.imag))
#+end_src

** Part 2
Part 2 can be done basically the same way as part 1, with only a small change to the update state function. In part 1, nesw move the ship; in part 2 they move the waypoint. Everything else is the same.
#+begin_src jupyter-python
  position, waypoint = 0, 10 + 1j
  for instruction, value in map(lambda x: (x[0], int(x[1:])), instructions):
      position, waypoint = update_state(position, waypoint, instruction, value, part=2)
  int(abs(position.real) + abs(position.imag))
#+end_src
