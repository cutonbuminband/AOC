#+PROPERTY: header-args:jupyter-python  :session aoc-2020 :kernel python
#+PROPERTY: header-args    :pandoc t

* Imports
#+begin_src jupyter-python
import pandas as pd
import numpy as np
from collections import defaultdict
import itertools
from pathlib import Path
import functools
datadir = Path("data/2020/")
#+end_src

* Day 1:
*Report Repair*
** Part 1
Specifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.
#+begin_src jupyter-python
data = np.loadtxt(datadir / "1.txt", dtype=int)
[pair[0] * pair[1] for pair in itertools.product(data, data) if sum(pair) == 2020][0]
#+end_src
** Part 2
In your expense report, what is the product of the three entries that sum to 2020?
#+begin_src jupyter-python
[triple[0] * triple[1] * triple[2] for triple in itertools.product(data, data, data) if sum(triple) == 2020][0]
#+end_src
* Day 2:
*Password Philosophy*
** Part 1
#+begin_src jupyter-python
  def is_valid(interval, letters, password):
      interval = [int(x) for x in interval.split('-')]
      occurrences = password.count(letters[0])
      return interval[0] <= occurrences <= interval[1]

  lines = list(map(str.split, open(datadir / "2.txt", encoding="utf8").readlines()))
  sum([is_valid(*line) for line in lines])
#+end_src
** Part 2
#+begin_src jupyter-python
  from operator import xor

  def is_valid(interval, letters, password):
      lower, upper = [int(x) - 1 for x in interval.split('-')]
      return xor(password[lower] == letters[0], password[upper] == letters[0])
  sum([is_valid(*line) for line in lines])
#+end_src
* Day 3
*Toboggan Trajectory*
** Part 1
#+begin_src jupyter-python
  def read(myfile):
      lines = open(myfile).readlines()
      lookup = {'.': 0, "#": 1}
      lines = np.array([[lookup[x] for x in line.strip()] for line in lines])
      return lines

  data = read(datadir / '3.txt')

  def count_trees(data, width_change, height_change):
      height, width = data.shape
      result = 0
      for i in range((height - 1) // height_change + 1):
          result += data[i * height_change, (i * width_change) % width]
      return result

  count_trees(data, 3, 1)
#+end_src
#+begin_src jupyter-python
  slopes = [[1, 1], [3, 1], [5, 1], [7, 1], [1, 2]]
  np.prod([count_trees(data, slope[0], slope[1]) for slope in slopes])
#+end_src
