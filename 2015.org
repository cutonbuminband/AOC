#+PROPERTY: header-args:jupyter-python  :session aoc :kernel python
#+PROPERTY: header-args    :pandoc t

* Imports
#+begin_src jupyter-python
  import pandas as pd
  import numpy as np
  from collections import defaultdict
  from pathlib import Path
  import functools
  import itertools
  import more_itertools
  datadir = Path("data/2015")
#+end_src

* Day 1
[[https://adventofcode.com/2015/day/1][Not Quite Lisp]]

** Part 1
#+begin_src jupyter-python
  line = open(datadir / "1.txt", encoding="utf8").readline()
  line.count("(") - line.count(")")
#+end_src

** Part 2
#+begin_src jupyter-python
  position = 0
  for idx, character in enumerate(line):
      position = position + (1 if character == "(" else -1)
      if position < 0:
          break
  idx + 1
#+end_src

* Day 2
[[https://adventofcode.com/2015/day/2][I Was Told There Would Be No Math]]
** Part 1
#+begin_src jupyter-python
with open(datadir / '2.txt') as f:
    boxes = [[int(x) for x in y.split('x')] for y in f.readlines()]
sum([(3*x*y + 2*x*z + 2*y*z) for x,y,z in map(sorted, boxes)])
#+end_src
** Part 2
#+begin_src jupyter-python
sum([ x * y * z + 2 * (x + y) for x,y,z in map(sorted, boxes)])
#+end_src
* Day 3
[[https://adventofcode.com/2015/day/3][Perfectly Spherical Houses in a Vacuum]]
** Part 1
#+begin_src jupyter-python
  instructions = open(datadir / "3.txt", encoding="utf8").readline().strip()
  commands = {"^": lambda x, y: (x, y + 1), "v": lambda x, y: (x, y - 1),
              ">": lambda x, y: (x + 1, y), "<": lambda x, y: (x - 1, y),}

  def execute_instructions(instructions, houses=None):
      position = 0, 0
      if houses is None:
          houses = {(0, 0): 1}
      for instruction in instructions:
          position = commands[instruction](*position)
          houses[position] = 1
      return houses

  len(execute_instructions(instructions))
#+end_src
** Part 2
#+begin_src jupyter-python
  houses = execute_instructions(instructions[::2])
  len(execute_instructions(instructions[1::2], houses))
#+end_src
