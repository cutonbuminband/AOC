#+PROPERTY: header-args:jupyter-python  :session aoc :kernel python
#+PROPERTY: header-args    :pandoc t

* Imports
#+begin_src jupyter-python
  import pandas as pd
  import numpy as np
  from collections import defaultdict
  from pathlib import Path
  import functools
  import itertools
  import more_itertools
  datadir = Path("data/2015")
#+end_src

* Day 1
[[https://adventofcode.com/2015/day/1][Not Quite Lisp]]

** Part 1
#+begin_src jupyter-python
  line = open(datadir / "1.txt", encoding="utf8").readline()
  line.count("(") - line.count(")")
#+end_src

** Part 2
#+begin_src jupyter-python
  position = 0
  for idx, character in enumerate(line):
      position = position + (1 if character == "(" else -1)
      if position < 0:
          break
  idx + 1
#+end_src

* Day 2
[[https://adventofcode.com/2015/day/2][I Was Told There Would Be No Math]]
** Part 1
#+begin_src jupyter-python
with open(datadir / '2.txt') as f:
    boxes = [[int(x) for x in y.split('x')] for y in f.readlines()]
sum([(3*x*y + 2*x*z + 2*y*z) for x,y,z in map(sorted, boxes)])
#+end_src
** Part 2
#+begin_src jupyter-python
sum([ x * y * z + 2 * (x + y) for x,y,z in map(sorted, boxes)])
#+end_src
* Day 3
[[https://adventofcode.com/2015/day/3][Perfectly Spherical Houses in a Vacuum]]
** Part 1
#+begin_src jupyter-python
  instructions = open(datadir / "3.txt", encoding="utf8").readline().strip()
  commands = {"^": lambda x, y: (x, y + 1), "v": lambda x, y: (x, y - 1),
              ">": lambda x, y: (x + 1, y), "<": lambda x, y: (x - 1, y),}

  def execute_instructions(instructions, houses=None):
      position = 0, 0
      if houses is None:
          houses = {(0, 0): 1}
      for instruction in instructions:
          position = commands[instruction](*position)
          houses[position] = 1
      return houses

  len(execute_instructions(instructions))
#+end_src
** Part 2
#+begin_src jupyter-python
  houses = execute_instructions(instructions[::2])
  len(execute_instructions(instructions[1::2], houses))
#+end_src
* Day 4
[[https://adventofcode.com/2015/day/4][The Ideal Stocking Stuffer]]
** Part 1
#+begin_src jupyter-python
  import hashlib
  h = hashlib.md5()
  prefix = "iwrupvqb"
  def brute_force(n):
      i = 0
      while i := i + 1:
          md5 = hashlib.md5((prefix + str(i)).encode(encoding="UTF-8")).hexdigest()
          if md5[:n] == n * "0":
              return i
  brute_force(5)
#+end_src

** Part 2
#+begin_src jupyter-python
  brute_force(6)
#+end_src

* Day 5
[[https://adventofcode.com/2015/day/5][Doesn't He Have Intern-Elves For This?]]
** Part 1
#+begin_src jupyter-python
  def is_nice(s):
      sufficient_vowels = len(re.findall("[aeiou]", s)) >= 3
      contains_double = (np.array(list(s))[1:] == np.roll(list(s), 1)[1:]).any()
      contains_forbidden = any(val in s for val in ["ab", "cd", "pq", "xy"])
      return sufficient_vowels and contains_double and not contains_forbidden
  sum(is_nice(x) for x in open(datadir / "5.txt").readlines())
#+end_src
** Part 2
#+begin_src jupyter-python
  def is_nice(s):
      contains_double = (np.array(list(s))[2:] == np.roll(list(s), 2)[2:]).any()
      contains_double_pair = bool(re.findall("(..).*\\1", s))
      return contains_double and contains_double_pair
  sum(is_nice(x) for x in open(datadir / "5.txt").readlines())
#+end_src
* Day 6
[[https://adventofcode.com/2015/day/6][Probably a Fire Hazard]]
** Part 1
#+begin_src jupyter-python
  lines = open(datadir / "6.txt").readlines()
  numbers = [[int(x) for x in re.findall("\d+", line)] for line in lines]
  instructions = [line.replace("turn ", "").split()[0] for line in lines]
  field = np.zeros([1000, 1000], dtype=int)
  for (x1, y1, x2, y2), instruction in zip(numbers, instructions):
      if instruction == "toggle":
          field[x1:x2 + 1, y1:y2 + 1] ^= 1
      else:
          field[x1:x2 + 1, y1:y2 + 1] = int(instruction == "on")
  field.sum()
#+end_src
** Part 2
#+begin_src jupyter-python
  field = np.zeros([1000, 1000], dtype=int)
  for (x1, y1, x2, y2), instruction in zip(numbers, instructions):
      if instruction == "toggle":
          field[x1:x2 + 1, y1:y2 + 1] += 2
      else:
          field[x1:x2 + 1, y1:y2 + 1] += 2 * int(instruction == "on") - 1
      field[np.where(field < 0)] = 0
  field.sum()
#+end_src
* Day 7
[[https://adventofcode.com/2015/day/7][Some Assembly Required]]
** Part 1
#+begin_src jupyter-python
  lines = open(datadir / "7.txt").readlines()
  circuit = {target: source for source, target in map(lambda x: x.strip().split(" -> "), lines)}
  memo = {}
  binops = {"AND": lambda x, y: x & y,
            "OR": lambda x, y: x | y,
            "LSHIFT": lambda x, y: x << y,
            "RSHIFT": lambda x, y: x >> y}
  def evaluate(symbol):
      try:
          result = int(symbol)
          return result
      except ValueError:
          pass
      if symbol not in memo:
          operation = circuit[symbol].split()
          if len(operation) == 1:
              memo[symbol] = evaluate(operation[0])
          elif len(operation) == 2:
              memo[symbol] = evaluate(operation[1]) ^ (2**16 - 1)
          else:
              arg1, op, arg2 = operation
              memo[symbol] = binops[op](evaluate(arg1), evaluate(arg2))
      return memo[symbol]
  evaluate("a")
#+end_src
** Part 2
We can reset everything by clearing out the memo dict, and setting a wire to a specific value (or expression) can be accomplished by modifying the circuit.

That gives
#+begin_src jupyter-python
  circuit["b"] = str(evaluate("a"))
  memo = {}
  evaluate("a")
#+end_src
* Day 8
[[https://adventofcode.com/2015/day/8][Matchsticks]]
** Part 1
#+begin_src jupyter-python
  lines = [x[:-1] for x in open(datadir / "8.txt").readlines()]
  sum(len(line) - len(eval(line)) for line in lines)
#+end_src
** Part 2
#+begin_src jupyter-python
  sum(2 + len([x for x in line if x in ["\"", "\\"]]) for line in lines)
#+end_src
* Day 9
[[https://adventofcode.com/2015/day/9][All in a Single Night]]
** Part 1
#+begin_src jupyter-python
  d = {}
  data = [x.split() for x in open(datadir / "9.txt").readlines()]
  for source, _, destination, __, distance in data:
      d[(source, destination)] = int(distance)
      d[(destination, source)] = int(distance)
  cities = set(x[0] for x in distances.keys())
  tours = [sum(d[route[start], route[start + 1]] for start in range(len(cities) - 1))
           for route in itertools.permutations(cities)]
  min(tours)
#+end_src
** Part 2
#+begin_src jupyter-python
  max(tours)
#+end_src
