#+PROPERTY: header-args:jupyter-python  :session aoc-2023 :kernel aoc
#+PROPERTY: header-args    :pandoc t
#+TITLE: 2023 Solutions

* Imports
#+begin_src jupyter-python
  # | eval: true
  # | output: false
  import functools
  import itertools
  import os
  import re
  import sys
  from collections import defaultdict, deque, namedtuple
  from queue import PriorityQueue

  import more_itertools
  import numpy as np
  import pandas as pd
  import scipy

  sys.path.insert(1, os.path.join(sys.path[0], ".."))

  import utils

  load = utils.year_load(2023)
#+end_src

* [[https://adventofcode.com/2023/day/1][Day 1: Trebuchet?!]]
** Part 1
Not much going on in part one. We need to extract the digits in each line and then add together $10\times$ all the first digits and all the last digits.
#+begin_src jupyter-python
  data = [[int(char) for char in line if char in "0123456879"] for line in load(1)]
  10 * sum(x[0] for x in data) + sum(x[-1] for x in data)
#+end_src

** Part 2
For part two, we need to work with the string representation of the numbers. The examples show that the numbers can overlap, so we want a string like "fiveight" to show a "5" first and then an "8".

We are only interested in the first and last digits of the string, so this could be done using a sliding window. Or we could hack it by padding the string representation of the number and doing a search and replace:
#+begin_src jupyter-python
  number_names = [
      ("one", "one1one"),
      ("two", "two2two"),
      ("three", "three3three"),
      ("four", "four4four"),
      ("five", "five5five"),
      ("six", "six6six"),
      ("seven", "seven7seven"),
      ("eight", "eight8eight"),
      ("nine", "nine9nine"),
  ]
  data = load(1, "raw")
  for pair in number_names:
      data = data.replace(pair[0], pair[1])

  data = data.split("\n")[:-1]
  data = [[int(char) for char in line if char in "0123456879"] for line in data]
  10 * sum(x[0] for x in data) + sum(x[-1] for x in data)
#+end_src

* [[https://adventofcode.com/2023/day/2][Day 2: Cube Conundrum]]

** Part 1
The most fiddly task in part 1 is parsing the input. Each line is a single game, with the game id appearing first and then the game outcome, separated by a colon. Each game consists of multiple rounds (delimited by a semicolon) and each round reveals multiple colours (delimited by commas).

So we split on the colon to separate the game id from the outcome, then split the outcome on semicolons to get each round, and finally split each round on commas to find the colours. A bit of regex let's us finally get to a list of three integers as the representation of a round.

Once we have that, we can compare each round in a game with the maximum number of =[red, green, blue]= cubes available and see if it is possible. A game fails if any single round is impossible.
#+begin_src jupyter-python
  def parse_game_round(game_round):
      colormap = {"red": 0, "green": 1, "blue": 2}
      regex = r"([0-9]*) (red|green|blue)"
      result = [0, 0, 0]
      for v, c in [re.search(regex, entry).groups() for entry in game_round.split(",")]:
          result[colormap[c]] = int(v)
      return result


  total = 0
  games = [
      np.array([parse_game_round(x) for x in line.split(":")[1].split(";")])
      for line in load(2)
  ]

  for idx, game in enumerate(games):
      if ((game - [12, 13, 14]) <= 0).all():
          total += idx + 1
  total
#+end_src

** Part 2
With part 1 out of the way, part 2 is trivial: we get the same representation for each game as before, and just calculate the maximum for each coordinate in any round, and then multiply those three numbers together.
#+begin_src jupyter-python
  sum(np.product(game.max(axis=0)) for game in games)
#+end_src
