#+PROPERTY: header-args:jupyter-python  :session aoc-2018 :kernel aoc
#+PROPERTY: header-args    :pandoc t

* Imports
#+begin_src jupyter-python
  import pandas as pd
  import numpy as np
  from collections import defaultdict, deque
  from pathlib import Path
  import functools
  import itertools
  import more_itertools
  datadir = Path("data/2018")
#+end_src

* Day 1
[[https://adventofcode.com/2018/day/1][Chronal Calibration]]
** Part 1
#+begin_src jupyter-python
data = np.loadtxt(datadir / "1.txt", dtype=int)
data.sum()
#+end_src

** Part 2
#+begin_src jupyter-python
  i = 0
  value = 0
  seen = {}
  while True:
      if value in seen:
          break
      seen[value] = 1
      value += data[i % len(data)]
      i += 1
  value
#+end_src

* Day 2
[[https://adventofcode.com/2018/day/2][Inventory Managment System]]
** Part 1
#+begin_src jupyter-python
  lines = [np.array([ord(y) for y in x.strip()]) for x in open(datadir / "2.txt").readlines()]
  twos = sum([2 in np.unique(list(line), return_counts=True)[1] for line in lines])
  twos * sum([3 in np.unique(list(line), return_counts=True)[1] for line in lines])
#+end_src

** Part 2
#+begin_src jupyter-python
  for s1 in lines:
      for s2 in lines:
          if len(s2) != len(s1): continue
          if (s2 - s1 != 0).sum() == 1:
              result = ''.join(chr(x) for x in s1[np.where(s1 == s2)])
              break
      else:
          continue
      break
result
#+end_src

* Day 3
[[https://adventofcode.com/2018/day/3][No Matter How You Slice It]]
** Part 1
#+begin_src jupyter-python
  import re
  num = re.compile(r"\d+")
  data = np.array([[int(x) for x in re.findall(num, line)] for line in open(datadir / "3.txt").readlines()])
  field = np.zeros([1000, 1000])
  for pid, x, y, w, h in data:
      field[x:x+w, y:y+h] += 1
  (field > 1).sum()
#+end_src

** Part 2
#+begin_src jupyter-python
  for pid, x, y, w, h in data:
      if (field[x:x+w, y:y+h] == 1).all():
          break
  pid
#+end_src

* Day 4
[[https://adventofcode.com/2018/day/4][Repose Record]]
** Part 1
#+begin_src jupyter-python
  from time import strptime
  events = [event[1:].strip().split("] ") for event in open(datadir / "4.txt").readlines()]
  date_format = "%Y-%m-%d %H:%M"
  events = sorted(events, key = lambda event : strptime(event[0], date_format))
  guards = {}
  while events:
      event = events.pop(0)
      if "Guard" in event[1]:
          active_guard = event[1][7:-13]
          if active_guard not in guards:
              guards[active_guard] = np.zeros(60)
          continue
      end = events.pop(0)
      guards[active_guard][int(event[0][-2:]):int(end[0][-2:])] += 1

  sleepiest_guard = sorted(guards.keys(), key = lambda x: - guards[x].sum())[0]
  int(sleepiest_guard) * guards[sleepiest_guard].argmax()
#+end_src

** Part 2
#+begin_src jupyter-python
  sleepiest_guard = sorted(guards.keys(), key = lambda x: - max(guards[x]))[0]
  int(sleepiest_guard) * guards[sleepiest_guard].argmax()
#+end_src

* Day 5
[[https://adventofcode.com/2018/day/5][Alchemical Reduction]]
** Part 1
#+begin_src jupyter-python
  import string
  s = open(datadir / "5.txt").readline().strip()

  def reduce(s):
      l = len(s)
      for char in string.ascii_lowercase:
          s = s.replace(f"{char + char.swapcase()}", "")
          s = s.replace(f"{char.swapcase() + char}", "")
      return l if l == len(s) else reduce(s)
  reduce(s)
#+end_src

** Part 2
#+begin_src jupyter-python
  min(reduce(s.replace(c, "").replace(c.upper(), "")) for c in string.ascii_lowercase)
#+end_src

* Day 6
[[https://adventofcode.com/2018/day/6][Chronal Coordinates]]

** Part 1
The numbers involved are small enough that brute force is a viable approach. It's ugly, but it works. The question is basically asking for the voronoi diagram of the initial points using the L1 metric, but I'm too slow to see an efficient way of calculating that. The approach would have to be something like determining the boundary line between each pair of points, and then intersecting all of those half planes to get the voronoi cell.
#+begin_src jupyter-python
  with open(datadir / '6.txt') as f:
      data = f.readlines()
  coordinates = np.array([list(map(int, re.findall("\d+", line))) for line in data])
  xmax, ymax = coordinates.max(axis=0)
  board = np.zeros([xmax, ymax], dtype=int)
  for x, y in itertools.product(range(xmax), range(ymax)):
      distances = (np.abs(coordinates - np.array([x, y]))).sum(axis=1)
      values, counts = np.unique(distances, return_counts=True)
      board[x, y] = distances.argmin() if counts[0] == 1 else -1
  infinite = functools.reduce(lambda x, y: set(x) | set(y), [board[0], board[:, 0], board[-1], board[:, -1]])
  max([(board == seed).sum() if seed not in infinite else 0 for seed in range(len(coordinates))])
#+end_src

** Part 2
#+begin_src jupyter-python
  board = np.zeros([xmax, ymax], dtype=int)
  for x,y in itertools.product(range(xmax), range(ymax)):
      board[x, y] = (np.abs(coordinates - np.array([x, y]))).sum()

  (board < 10000).sum()
#+end_src

** Bonus
I haven't figured out the cleanest way of solving part 1, but here's an approach that's slightly better than brute force. We can basically flood fill the grid, starting with the seed locations given in the input, and then expanding one step at a time. That way we end up considering the effect of at most four (and usually only one or two) seeds on each location, and we avoid having to calculate the distance from the point to every single seed.
#+begin_src jupyter-python
  import matplotlib.pyplot as plt
  board = np.zeros([xmax + 1, ymax + 1], dtype=int)
  def expand_one(cells, idx, to_paint):
      new_cells = []
      for neighbor in get_neighbors(cells):
          if board[neighbor] == 0:
              if neighbor in to_paint:
                  del to_paint[neighbor]
                  board[neighbor] = -1
              else:
                  to_paint[neighbor] = idx + 1
                  new_cells.append(neighbor)

      return new_cells

  def get_neighbors(cells):
      neighbors = []
      for x, y in cells:
          candidates = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]
          neighbors += [(x,y) for x,y in candidates if (0 <= x <= xmax) and (0 <= y <= ymax)]
      return set(neighbors)
#+end_src

We can animate the process of expanding each seed

#+begin_src jupyter-python
  to_paint = {tuple(x): idx + 1 for idx, x in enumerate(coordinates)}
  system = [[x] for x in to_paint.keys()]
  boards = []
  while to_paint:
      for key in to_paint:
          board[key] = to_paint[key]
      to_paint = {}
      for idx, cells in enumerate(system):
          system[idx] = expand_one(cells, idx, to_paint)
      image = board.astype(float).copy()
      image[image == 0] = np.nan
      boards.append(image)

  import matplotlib.animation as animation

  s = 3.0
  fig = plt.figure(figsize=(s, s*ymax/xmax))
  l = len(boards)
  i=0
  im = plt.imshow(boards[0], animated=True, cmap="inferno")
  plt.xticks([])
  plt.yticks([])
  def updatefig(*args):
      global i
      if i < len(boards) - 1:
          i += 1
      else:
          i=0
      im.set_array(boards[i])
      return im,
  a = animation.FuncAnimation(fig, updatefig,  blit=True, frames=len(boards))
  a.save('graphs/2018-06.gif', fps=30)
#+end_src

That gives this pretty cool plot

[[https://github.com/cutonbuminband/AOC/blob/main/graphs/2018-06.gif]]

* Day 7
[[https://adventofcode.com/2018/day/7][The Sum of Its Parts]]
** Part 1
#+begin_src jupyter-python
  constraints = {}
  lines = open(datadir / "7.txt").readlines()
  for tokens in map(str.split, lines):
      parent, child = tokens[1], tokens[-3]
      if parent not in constraints:
          constraints[parent] = ['', '']
      if child not in constraints:
          constraints[child] = ['', '']
      constraints[parent][0] += child
      constraints[child][1] += parent
  executed = ''
  available = []

  def pop_node(node, ordering):
      for child in ordering[node][0]:
          idx = ordering[child][1].index(node)
          ordering[child] = [ordering[child][0], ordering[child][1][:idx] + ordering[child][1][idx + 1:]]
      del ordering[node]      

  part1 = constraints.copy()
  while part1:
      available = sorted(set(available + [key for key in part1 if not part1[key][1]]))
      current = available.pop(0)
      executed += current
      pop_node(current, part1)

  executed

#+end_src

** Part 2
#+begin_src jupyter-python
  active = []
  n_workers = 5
  part2 = constraints.copy()
  time = -1
  while part2:
      new_active = []
      for key, count in active:
          if count:
              new_active += [[key, count - 1]]
          else:
              pop_node(key, part2)
      active = new_active
      available = sorted(set(key for key in part2 if not part2[key][1]) - set(x[0] for x in active))
      while available and len(active) < n_workers:
          key = available.pop(0)
          active += [[key, ord(key) - ord('A') + 60]]
      time += 1
  time
#+end_src

* Day 8
[[https://adventofcode.com/2018/day/8][Memory Maneuver]]
** Part 1
#+begin_src jupyter-python
  data = [int(x) for x in open(datadir / "8.txt").read().split()]
  def parse(tree_list):
      result = {"children": []}
      n_children, n_metadata = tree_list[:2]
      tree_list = tree_list[2:]
      for _ in range(n_children):
          tree_list, child = parse(tree_list)
          result["children"] += [child]
      result["metadata"] = tree_list[:n_metadata]
      return tree_list[n_metadata:], result

  def weigh(tree):
      if not tree['children']:
          return sum(tree["metadata"])
      return sum(tree["metadata"]) + sum(map(weigh, tree['children']))

  tree = parse(data)[1]
  weigh(tree)
#+end_src

** Part 2
#+begin_src jupyter-python
  def value(node):
      children = node['children']
      if not children:
          return sum(node["metadata"])
      return sum(value(children[idx - 1]) for idx in node["metadata"]
                 if idx <= len(children))
  value(tree)

#+end_src

* Day 9
[[https://adventofcode.com/2018/day/9][https://adventofcode.com/2018/day/9]]
** Part 1
#+begin_src jupyter-python
  n_players = 419
  n_marbles = 72164

  def run(n_players, n_marbles):
      scores = defaultdict(int)
      circle = deque([0])
      for marble in range(1, n_marbles + 1):
          if marble % 23 == 0:
              circle.rotate(7)
              scores[marble % n_players] += marble + circle.pop()
              circle.rotate(-1)
          else:
              circle.rotate(-1)
              circle.append(marble)
      return max(scores.values())
  run(n_players, n_marbles)
#+end_src

** Part 2
#+begin_src jupyter-python
  run(n_players, n_marbles * 100)
#+end_src
