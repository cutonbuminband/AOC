#+PROPERTY: header-args:jupyter-python  :session aoc :kernel python
#+PROPERTY: header-args    :pandoc t

* Imports
#+begin_src jupyter-python
  import pandas as pd
  import numpy as np
  from collections import defaultdict
  from pathlib import Path
  import functools
  import itertools
  import more_itertools
  datadir = Path("data/2018")
#+end_src

* Day 1
[[https://adventofcode.com/2018/day/1][Chronal Calibration]]
** Part 1
#+begin_src jupyter-python
data = np.loadtxt(datadir / "1.txt", dtype=int)
data.sum()
#+end_src
** Part 2
#+begin_src jupyter-python
  i = 0
  value = 0
  seen = {}
  while True:
      if value in seen:
          break
      seen[value] = 1
      value += data[i % len(data)]
      i += 1
  value
#+end_src
* Day 2
[[https://adventofcode.com/2018/day/2][Inventory Managment System]]
** Part 1
#+begin_src jupyter-python
  lines = [np.array([ord(y) for y in x.strip()]) for x in open(datadir / "2.txt").readlines()]
  twos = sum([2 in np.unique(list(line), return_counts=True)[1] for line in lines])
  twos * sum([3 in np.unique(list(line), return_counts=True)[1] for line in lines])
#+end_src
** Part 2
#+begin_src jupyter-python
  for s1 in lines:
      for s2 in lines:
          if len(s2) != len(s1): continue
          if (s2 - s1 != 0).sum() == 1:
              result = ''.join(chr(x) for x in s1[np.where(s1 == s2)])
              break
      else:
          continue
      break
result
#+end_src
* Day 3
[[https://adventofcode.com/2018/day/3][No Matter How You Slice It]]
** Part 1
#+begin_src jupyter-python
  import re
  num = re.compile(r"\d+")
  data = np.array([[int(x) for x in re.findall(num, line)] for line in open(datadir / "3.txt").readlines()])
  field = np.zeros([1000, 1000])
  for pid, x, y, w, h in data:
      field[x:x+w, y:y+h] += 1
  (field > 1).sum()
#+end_src
** Part 2
#+begin_src jupyter-python
  for pid, x, y, w, h in data:
      if (field[x:x+w, y:y+h] == 1).all():
          break
  pid
#+end_src
* Day 4
[[https://adventofcode.com/2018/day/4][Repose Record]]
** Part 1
#+begin_src jupyter-python
  from time import strptime
  events = [event[1:].strip().split("] ") for event in open(datadir / "4.txt").readlines()]
  date_format = "%Y-%m-%d %H:%M"
  events = sorted(events, key = lambda event : strptime(event[0], date_format))
  guards = {}
  while events:
      event = events.pop(0)
      if "Guard" in event[1]:
          active_guard = event[1][7:-13]
          if active_guard not in guards:
              guards[active_guard] = np.zeros(60)
          continue
      end = events.pop(0)
      guards[active_guard][int(event[0][-2:]):int(end[0][-2:])] += 1

  sleepiest_guard = sorted(guards.keys(), key = lambda x: - guards[x].sum())[0]
  int(sleepiest_guard) * guards[sleepiest_guard].argmax()
#+end_src
** Part 2
#+begin_src jupyter-python
  sleepiest_guard = sorted(guards.keys(), key = lambda x: - max(guards[x]))[0]
  int(sleepiest_guard) * guards[sleepiest_guard].argmax()
#+end_src
* Day 5
[[https://adventofcode.com/2018/day/5][Alchemical Reduction]]
** Part 1
#+begin_src jupyter-python
  import string
  s = open(datadir / "5.txt").readline().strip()

  def reduce(s):
      l = len(s)
      for char in string.ascii_lowercase:
          s = s.replace(f"{char + char.swapcase()}", "")
          s = s.replace(f"{char.swapcase() + char}", "")
      return l if l == len(s) else reduce(s)
  reduce(s)
#+end_src

** Part 2
#+begin_src jupyter-python
  min(reduce(s.replace(c, "").replace(c.upper(), "")) for c in string.ascii_lowercase)
#+end_src

* Day 6
[[https://adventofcode.com/2018/day/6][Chronal Coordinates]]

** Part 1
The numbers involved are small enough that brute force is a viable approach. It's ugly, but it works. The question is basically asking for the voronoi diagram of the initial points using the L1 metric, but I'm too slow to see an efficient way of calculating that. The approach would have to be something like determining the boundary line between each pair of points, and then intersecting all of those half planes to get the voronoi cell.
#+begin_src jupyter-python
  with open(datadir / '6.txt') as f:
      data = f.readlines()
  coordinates = np.array([list(map(int, re.findall("\d+", line))) for line in data])
  xmax, ymax = coordinates.max(axis=0)
  board = np.zeros([xmax, ymax], dtype=int)
  for x, y in itertools.product(range(xmax), range(ymax)):
      distances = (np.abs(coordinates - np.array([x, y]))).sum(axis=1)
      values, counts = np.unique(distances, return_counts=True)
      board[x, y] = distances.argmin() if counts[0] == 1 else -1
  infinite = functools.reduce(lambda x, y: set(x) | set(y), [board[0], board[:, 0], board[-1], board[:, -1]])
  max([(board == seed).sum() if seed not in infinite else 0 for seed in range(len(coordinates))])
#+end_src

** Part 2
#+begin_src jupyter-python
  board = np.zeros([xmax, ymax], dtype=int)
  for x,y in itertools.product(range(xmax), range(ymax)):
      board[x, y] = (np.abs(coordinates - np.array([x, y]))).sum()

  (board < 10000).sum()
#+end_src
